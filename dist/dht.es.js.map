{"version":3,"file":"dht.es.js","sources":["../src/index.js"],"sourcesContent":["const dhtLib = require('node-dht-sensor');\nconst {\n  Thing,\n  Value,\n  Property,\n} = require('webthing');\n\nconst config = {\n  id: 'urn:dev:ops:dht-22-sensor',\n  name: 'DHT-22',\n  description: 'Ambient temperature & humidity sensor',\n  interval: 3000,\n  sensor: {\n    type: 22,\n    pin: 4,\n  },\n  properties: {\n    temperature: {\n      '@type': 'TemperatureProperty',\n      title: 'Temperature',\n      type: 'number',\n      description: 'The ambient temperature measured in Â°C',\n      unit: 'degree celcius',\n      readOnly: true,\n    },\n    humidity: {\n      '@type': 'HumidityProperty',\n      title: 'Humidity',\n      type: 'number',\n      description: 'The current relative humidity in %',\n      minimum: 0,\n      maximum: 100,\n      unit: 'percent',\n      readOnly: true,\n    }\n  }\n}\n\nclass WebThingsDHT {\n  constructor(opt = config) {\n    this.opt = opt\n  }\n  init() {\n    const { id, name, description, properties, interval } = this.opt\n    const dht = new Thing(id, name, ['Temperature', 'Humidity'], description);\n    const dht_temperature = new Value(0.0);\n    const dht_humidity = new Value(0.0);\n    dht.addProperty(new Property(dht, 'temperature', dht_temperature, properties.temperature));\n    dht.addProperty(new Property(dht, 'humidity', dht_humidity, properties.humidity));\n    setInterval(() => {\n      try {\n        const { temperature, humidity } = this.read()\n        // Update the underlying value, which in turn notifies all listeners\n        dht_temperature.notifyOfExternalUpdate(temperature);\n        dht_humidity.notifyOfExternalUpdate(humidity);\n      } catch (e) {\n        console.log(e)\n      }\n    }, interval);\n    return dht\n  }\n  read() {\n    const { type, pin } = this.opt.sensor\n    return dhtLib.read(type, pin)\n  }\n}\n\nmodule.exports = WebThingsDHT"],"names":["const","dhtLib","require","config","id","name","description","interval","sensor","type","pin","properties","temperature","title","unit","readOnly","humidity","minimum","maximum","WebThingsDHT","constructor","opt","init","this","dht","Thing","dht_temperature","Value","dht_humidity","addProperty","Property","read","notifyOfExternalUpdate","e","console","log","module","exports"],"mappings":"AAAAA,IAAMC,EAASC,QAAQ,qBAKnBA,QAAQ,6CAENC,EAAS,CACbC,GAAI,4BACJC,KAAM,SACNC,YAAa,wCACbC,SAAU,IACVC,OAAQ,CACNC,KAAM,GACNC,IAAK,GAEPC,WAAY,CACVC,YAAa,SACF,sBACTC,MAAO,cACPJ,KAAM,SACNH,YAAa,yCACbQ,KAAM,iBACNC,UAAU,GAEZC,SAAU,SACC,mBACTH,MAAO,WACPJ,KAAM,SACNH,YAAa,qCACbW,QAAS,EACTC,QAAS,IACTJ,KAAM,UACNC,UAAU,KAKVI,EACJC,SAAYC,kBAAMlB,QACXkB,IAAMA,GAEbC,YAAAA,6BAC0DC,KAAKF,gCACvDG,EAAM,IAAIC,cAAgB,CAAC,cAAe,2BAC1CC,EAAkB,IAAIC,EAAM,GAC5BC,EAAe,IAAID,EAAM,UAC/BH,EAAIK,YAAY,IAAIC,EAASN,EAAK,cAAeE,EAAiBf,EAAWC,cAC7EY,EAAIK,YAAY,IAAIC,EAASN,EAAK,WAAYI,EAAcjB,EAAWK,4CAGjCO,EAAKQ,oBAEvCL,EAAgBM,sCAChBJ,EAAaI,uBAAuBhB,GACpC,MAAOiB,GACPC,QAAQC,IAAIF,KAEb1B,GACIiB,GAETO,YAAAA,sBACwBR,KAAKF,IAAIb,cACxBP,EAAO8B,oBAIlBK,OAAOC,QAAUlB"}